{"version":3,"file":"inject.js","mappings":"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","sources":["../webpack/bootstrap","inject.ts","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export var YoursEventName;\n(function (YoursEventName) {\n    YoursEventName[\"CONNECT\"] = \"connectRequest\";\n    YoursEventName[\"DISCONNECT\"] = \"disconnect\";\n    YoursEventName[\"IS_CONNECTED\"] = \"isConnected\";\n    YoursEventName[\"GET_PUB_KEYS\"] = \"getPubKeys\";\n    YoursEventName[\"GET_ADDRESSES\"] = \"getAddresses\";\n    YoursEventName[\"GET_NETWORK\"] = \"getNetwork\";\n    YoursEventName[\"GET_BALANCE\"] = \"getBalance\";\n    YoursEventName[\"GET_MNEE_BALANCE\"] = \"getMNEEBalance\";\n    YoursEventName[\"GET_ORDINALS\"] = \"getOrdinals\";\n    YoursEventName[\"GET_BSV20S\"] = \"getBsv20s\";\n    YoursEventName[\"SEND_BSV\"] = \"sendBsvRequest\";\n    YoursEventName[\"SEND_BSV20\"] = \"sendBsv20Request\";\n    YoursEventName[\"SEND_MNEE\"] = \"sendMNEERequest\";\n    YoursEventName[\"TRANSFER_ORDINAL\"] = \"transferOrdinalRequest\";\n    YoursEventName[\"SIGN_MESSAGE\"] = \"signMessageRequest\";\n    YoursEventName[\"BROADCAST\"] = \"broadcastRequest\";\n    YoursEventName[\"GET_SIGNATURES\"] = \"getSignaturesRequest\";\n    YoursEventName[\"GET_SOCIAL_PROFILE\"] = \"getSocialProfile\";\n    YoursEventName[\"GET_PAYMENT_UTXOS\"] = \"getPaymentUtxos\";\n    YoursEventName[\"GET_EXCHANGE_RATE\"] = \"getExchangeRate\";\n    YoursEventName[\"PURCHASE_ORDINAL\"] = \"purchaseOrdinalRequest\";\n    YoursEventName[\"PURCHASE_BSV20\"] = \"purchaseOrdinalRequest\";\n    YoursEventName[\"GENERATE_TAGGED_KEYS\"] = \"generateTaggedKeysRequest\";\n    YoursEventName[\"GET_TAGGED_KEYS\"] = \"getTaggedKeys\";\n    YoursEventName[\"INSCRIBE\"] = \"sendBsvRequest\";\n    YoursEventName[\"LOCK_BSV\"] = \"sendBsvRequest\";\n    YoursEventName[\"ENCRYPT\"] = \"encryptRequest\";\n    YoursEventName[\"DECRYPT\"] = \"decryptRequest\";\n    YoursEventName[\"SIGNED_OUT\"] = \"signedOut\";\n    YoursEventName[\"USER_CONNECT_RESPONSE\"] = \"userConnectResponse\";\n    YoursEventName[\"SEND_BSV_RESPONSE\"] = \"sendBsvResponse\";\n    YoursEventName[\"SEND_BSV20_RESPONSE\"] = \"sendBsv20Response\";\n    YoursEventName[\"SEND_MNEE_RESPONSE\"] = \"sendMNEEResponse\";\n    YoursEventName[\"TRANSFER_ORDINAL_RESPONSE\"] = \"transferOrdinalResponse\";\n    YoursEventName[\"PURCHASE_ORDINAL_RESPONSE\"] = \"purchaseOrdinalResponse\";\n    YoursEventName[\"SIGN_MESSAGE_RESPONSE\"] = \"signMessageResponse\";\n    YoursEventName[\"BROADCAST_RESPONSE\"] = \"broadcastResponse\";\n    YoursEventName[\"GET_SIGNATURES_RESPONSE\"] = \"getSignaturesResponse\";\n    YoursEventName[\"GENERATE_TAGGED_KEYS_RESPONSE\"] = \"generateTaggedKeysResponse\";\n    YoursEventName[\"ENCRYPT_RESPONSE\"] = \"encryptResponse\";\n    YoursEventName[\"DECRYPT_RESPONSE\"] = \"decryptResponse\";\n    YoursEventName[\"SYNC_UTXOS\"] = \"syncUtxos\";\n    YoursEventName[\"QUEUE_STATUS_UPDATE\"] = \"queueStatusUpdate\";\n    YoursEventName[\"IMPORT_STATUS_UPDATE\"] = \"importStatusUpdate\";\n    YoursEventName[\"FETCHING_TX_STATUS_UPDATE\"] = \"fetchingTx\";\n    YoursEventName[\"BLOCK_HEIGHT_UPDATE\"] = \"blockHeightUpdate\";\n    YoursEventName[\"SWITCH_ACCOUNT\"] = \"switchAccount\";\n})(YoursEventName || (YoursEventName = {}));\nexport var CustomListenerName;\n(function (CustomListenerName) {\n    CustomListenerName[\"YOURS_EMIT_EVENT\"] = \"YoursEmitEvent\";\n    CustomListenerName[\"YOURS_REQUEST\"] = \"YoursRequest\";\n    CustomListenerName[\"YOURS_RESPONSE\"] = \"YoursResponse\";\n})(CustomListenerName || (CustomListenerName = {}));\nconst createYoursMethod = (type) => {\n    return async (params) => {\n        return new Promise((resolve, reject) => {\n            const messageId = `${type}-${Date.now()}-${Math.random()}`;\n            const requestEvent = new CustomEvent(CustomListenerName.YOURS_REQUEST, {\n                detail: { messageId, type, params },\n            });\n            function onResponse(e) {\n                const responseEvent = e;\n                const { detail } = responseEvent;\n                if (detail.type === type) {\n                    if (detail.success) {\n                        resolve(detail.data);\n                    }\n                    else {\n                        reject(detail.error);\n                    }\n                }\n            }\n            self.addEventListener(messageId, onResponse, { once: true });\n            self.dispatchEvent(requestEvent);\n        });\n    };\n};\nconst whitelistedEvents = [YoursEventName.SIGNED_OUT, YoursEventName.SWITCH_ACCOUNT]; // Whitelisted event names\nconst createYoursEventEmitter = () => {\n    const eventListeners = new Map(); // Object to store event listeners\n    const on = (eventName, callback) => {\n        // Check if the provided event name is in the whitelist\n        if (whitelistedEvents.includes(eventName)) {\n            if (!eventListeners.has(eventName)) {\n                eventListeners.set(eventName, []);\n            }\n            eventListeners.get(eventName)?.push(callback);\n        }\n        else {\n            console.error('Event name is not whitelisted:', eventName);\n        }\n    };\n    const removeListener = (eventName, callback) => {\n        const listeners = eventListeners.get(eventName);\n        if (listeners) {\n            eventListeners.set(eventName, listeners.filter((fn) => fn !== callback));\n        }\n    };\n    const emit = (eventName, params) => {\n        const listeners = eventListeners.get(eventName);\n        if (listeners) {\n            listeners.forEach((callback) => callback(params));\n        }\n    };\n    return {\n        on,\n        removeListener,\n        emit,\n    };\n};\nconst { on, removeListener, emit } = createYoursEventEmitter();\n//@ts-ignore TODO: remove this once MNEE is released.\nconst provider = {\n    isReady: true,\n    on,\n    removeListener,\n    connect: createYoursMethod(YoursEventName.CONNECT),\n    disconnect: createYoursMethod(YoursEventName.DISCONNECT),\n    isConnected: createYoursMethod(YoursEventName.IS_CONNECTED),\n    getPubKeys: createYoursMethod(YoursEventName.GET_PUB_KEYS),\n    getAddresses: createYoursMethod(YoursEventName.GET_ADDRESSES),\n    getNetwork: createYoursMethod(YoursEventName.GET_NETWORK),\n    getBalance: createYoursMethod(YoursEventName.GET_BALANCE),\n    getMNEEBalance: createYoursMethod(YoursEventName.GET_MNEE_BALANCE),\n    getOrdinals: createYoursMethod(YoursEventName.GET_ORDINALS),\n    getBsv20s: createYoursMethod(YoursEventName.GET_BSV20S),\n    sendBsv: createYoursMethod(YoursEventName.SEND_BSV),\n    sendBsv20: createYoursMethod(YoursEventName.SEND_BSV20),\n    sendMNEE: createYoursMethod(YoursEventName.SEND_MNEE),\n    transferOrdinal: createYoursMethod(YoursEventName.TRANSFER_ORDINAL),\n    signMessage: createYoursMethod(YoursEventName.SIGN_MESSAGE),\n    broadcast: createYoursMethod(YoursEventName.BROADCAST),\n    getSignatures: createYoursMethod(YoursEventName.GET_SIGNATURES),\n    getSocialProfile: createYoursMethod(YoursEventName.GET_SOCIAL_PROFILE),\n    getPaymentUtxos: createYoursMethod(YoursEventName.GET_PAYMENT_UTXOS),\n    getExchangeRate: createYoursMethod(YoursEventName.GET_EXCHANGE_RATE),\n    purchaseOrdinal: createYoursMethod(YoursEventName.PURCHASE_ORDINAL),\n    purchaseBsv20: createYoursMethod(YoursEventName.PURCHASE_BSV20),\n    generateTaggedKeys: createYoursMethod(YoursEventName.GENERATE_TAGGED_KEYS),\n    getTaggedKeys: createYoursMethod(YoursEventName.GET_TAGGED_KEYS),\n    inscribe: createYoursMethod(YoursEventName.INSCRIBE),\n    lockBsv: createYoursMethod(YoursEventName.LOCK_BSV),\n    encrypt: createYoursMethod(YoursEventName.ENCRYPT),\n    decrypt: createYoursMethod(YoursEventName.DECRYPT),\n};\nif (typeof window !== 'undefined') {\n    window.panda = provider;\n    window.yours = provider;\n}\n// Utility function to filter and emit only whitelisted events\nconst emitWhitelistedEvent = (action, params) => {\n    if (whitelistedEvents.includes(action)) {\n        emit(action, params);\n    }\n};\nself.addEventListener(CustomListenerName.YOURS_EMIT_EVENT, (event) => {\n    const emitEvent = event;\n    const { action, params } = emitEvent.detail;\n    emitWhitelistedEvent(action, params);\n});\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["YoursEventName","CustomListenerName","__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","createYoursMethod","type","async","Promise","resolve","reject","messageId","Date","now","Math","random","requestEvent","CustomEvent","YOURS_REQUEST","detail","params","self","addEventListener","e","responseEvent","success","data","error","once","dispatchEvent","whitelistedEvents","SIGNED_OUT","SWITCH_ACCOUNT","on","removeListener","emit","createYoursEventEmitter","eventListeners","Map","eventName","callback","_eventListeners$get","includes","has","set","push","console","listeners","filter","fn","forEach","provider","isReady","connect","CONNECT","disconnect","DISCONNECT","isConnected","IS_CONNECTED","getPubKeys","GET_PUB_KEYS","getAddresses","GET_ADDRESSES","getNetwork","GET_NETWORK","getBalance","GET_BALANCE","getMNEEBalance","GET_MNEE_BALANCE","getOrdinals","GET_ORDINALS","getBsv20s","GET_BSV20S","sendBsv","SEND_BSV","sendBsv20","SEND_BSV20","sendMNEE","SEND_MNEE","transferOrdinal","TRANSFER_ORDINAL","signMessage","SIGN_MESSAGE","broadcast","BROADCAST","getSignatures","GET_SIGNATURES","getSocialProfile","GET_SOCIAL_PROFILE","getPaymentUtxos","GET_PAYMENT_UTXOS","getExchangeRate","GET_EXCHANGE_RATE","purchaseOrdinal","PURCHASE_ORDINAL","purchaseBsv20","PURCHASE_BSV20","generateTaggedKeys","GENERATE_TAGGED_KEYS","getTaggedKeys","GET_TAGGED_KEYS","inscribe","INSCRIBE","lockBsv","LOCK_BSV","encrypt","ENCRYPT","decrypt","DECRYPT","window","panda","yours","YOURS_EMIT_EVENT","event","emitEvent","action","emitWhitelistedEvent"],"sourceRoot":""}